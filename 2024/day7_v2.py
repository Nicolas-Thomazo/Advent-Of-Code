"""
--- Day 7: Bridge Repair ---

Link:
    https://adventofcode.com/2024/day/7

"""
#%%
import itertools
from pathlib import Path
from typing import List, Tuple


def remap(sections: str) -> list[tuple[int, list[int]]]:
    """
    Remap example list input provided in "Advent of Code"
    format, to two separate lists.
    """
    equations = sections.strip().split('\n')

    return [(int((res := eq.split(': ', 1))[0]), [int(r) for r in res[1].split(' ')])
            for eq in equations]


def generate_truth_table(n):
    """Generates all possible binary combinations for n variables."""
    return list(itertools.product([0, 1], repeat=n))


def generate_truth_table_for_part_2(n):
    """Generates all possible binary combinations for n variables."""
    return list(itertools.product([0, 1, 2], repeat=n))


def calibration_result_of_true_equations(equations: list[tuple[int, list[int]]]) -> int:
    """
    Solution to Part 1

    *What is their total calibration result?*
    """
    sum_of_test_values = 0
    list_sum=[]
    for test, nums in equations:
        if len(nums) == 1 and nums[0] == test:
            sum_of_test_values += test
            list_sum.append(test)
            continue

        for operations in generate_truth_table(len(nums) - 1):
            run_total = nums[0]
            for i, op in enumerate(operations, start=1):
                if op == 0:
                    run_total *= nums[i]
                if op == 1:
                    run_total += nums[i]

                # Seems to slow down code, rather than make it faster? Weird.
                # if run_total > test:
                #    break
            else:
                if run_total == test:
                    sum_of_test_values += test
                    list_sum.append(test)
                    break

    return sum_of_test_values,list_sum


def calibration_result_with_concat_operator(equations: list[tuple[int, list[int]]]) -> int:
    """
    Solution to Part 2

    *What is their total calibration result?*
    """
    sum_of_test_values = 0
    list_sum=[]
    for test, nums in equations:
        if len(nums) == 1 and  nums[0] == test:
            sum_of_test_values += test
            list_sum.append(test)
            continue

        for operations in generate_truth_table_for_part_2(len(nums) - 1):
            run_total = nums[0]
            for i, op in enumerate(operations, start=1):
                if op == 0:
                    run_total *= nums[i]
                if op == 1:
                    run_total += nums[i]
                if op == 2:
                    run_total = int(f'{run_total}{nums[i]}')

                # Seems to slow down code, rather than make it faster? Weird.
                # if run_total > test:
                #    break
            else:
                if run_total == test:
                    sum_of_test_values += test
                    list_sum.append(test)
                    break

    return sum_of_test_values,list_sum


def solve(input_file):

    if input_file:
        demo = False
        print(f"Solving with input file {input_file}")
        try:
            INPUT = open(input_file).read()
        except FileNotFoundError:
            print('File not found, using default ...')
            INPUT = open(Path(__file__).parent.parent / 'Inputs' / '07').read()
    else:
        demo = True
        INPUT = DEMO_INPUT

    print("Solving Day 7 Problem! ðŸŽ„")

    _equations = remap(INPUT)
    # Part 1
    response,list_sum=calibration_result_of_true_equations(_equations)
    print('Part 1:  ',response)
    print(list_sum)
    # Part 2
    # print('Part 2:  ', calibration_result_with_concat_operator(_equations))


if __name__ == '__main__':
    solve("test.txt")
# %%

my_solution= [224381, 5003, 441496, 109878300, 20411640, 1571, 6714, 2556260, 9081072, 11006423, 53385783, 735632, 12876000, 17581536, 202633925, 97549292, 1561680, 15191672, 13860, 1987, 46339200, 20232744, 5924, 40312641, 2141175, 107992570, 918935325, 8469183, 122, 5970, 27381127, 52476534, 138880, 995580, 11403, 330447882, 15179, 1320813, 273549927, 15898468, 17320, 1797, 15547949, 1879637864, 8274, 2400, 5168317, 21250160, 273138, 94662, 321566102, 13685, 790133, 7252134456, 8154320, 17820, 1366330766, 676, 246966, 20297648, 5225057, 103990080, 1105635, 103359403, 108162065, 6498, 311694, 131459408, 1409788800, 117061444, 37920196, 1444763880, 59444, 4146, 6249600, 9478640, 60044752, 645625404, 1621920, 17690, 365512, 41543073, 58759, 25718497, 556, 38172933, 36789690, 78959322, 1432, 135999705, 8242976, 26307830922, 1083, 11777482, 13040, 3843, 124818575, 333432288, 10180, 1791368, 2963, 303881, 112534350, 327731040, 344484, 148035889, 165467563, 222169, 451952, 5280132984, 1665, 91616, 53910, 1169035, 110043089, 331500, 3144, 479159, 200299662, 257143040448, 2166, 289, 139650, 3357, 198440, 8364, 419862, 36686601000, 1751, 13111, 10859940, 15881, 21211, 4542060, 21933258, 470, 296359, 1163647626, 22673304, 2805396096, 18146520, 3107702724, 982, 476, 23117061, 921585, 1902730, 79546, 1687628, 376580, 10977511, 20712, 2800704, 15704889, 895536, 65724939, 948, 28473271, 1014918744, 162166399920, 50852, 1626457, 991101696, 138642, 9036, 33025904352, 70225, 3825, 2851, 203305584, 239360, 1143378721, 280842, 6422, 7397, 413447, 11285120, 382541280, 8869392, 351018, 534600, 26508882, 9784837, 2958, 789693, 10070069, 2001586498, 14043700944, 1578, 155450400, 66010180, 21605, 3087024, 16535367, 799003105, 4304408, 285043637736, 909, 2214, 2097920, 4897932, 52158, 23304, 4243659, 471859, 443456, 54974592, 278598, 38021570720, 5086640, 606, 49541, 1790, 503, 6887, 918599, 15912846, 8867, 8506485, 45665, 2012551695, 998, 1734480, 8928848124, 656880, 239, 5542542, 31211, 26321360, 22924, 74576, 12382719, 708680, 722465, 1498968, 1834803, 1449, 180612, 29768, 324367, 1662015663, 122683056, 16352, 6810091257, 13160, 9072, 142690, 1350, 105818400, 508269, 1612491937, 1868983236, 87745140, 2937158, 2654, 31847, 3557400, 275223, 93181, 328798, 13952103, 47989, 11418200500, 58, 12543, 440190, 71028585, 1593352, 39425, 946, 26503137, 2572786, 564128512, 740946416, 152224, 145124352, 368188110675, 1462, 15930, 163048, 12547, 106568000, 2570994, 945, 271349811, 40876, 7838019, 44949960, 1097, 1143, 5679, 5197478, 26523, 264220, 1041, 28887040, 17084, 102297857, 971, 20407, 1724327218, 128448, 1285, 2034580]
true_soluton=[224381, 5003, 441496, 109878300, 20411640, 1571, 6714, 2556260, 9081072, 11006423, 53385783, 735632, 12876000, 17581536, 202633925, 97549292, 1561680, 15191672, 13860, 1987, 46339200, 20232744, 5924, 40312641, 2141175, 107992570, 918935325, 8469183, 122, 5970, 27381127, 52476534, 138880, 995580, 11403, 330447882, 15179, 1320813, 273549927, 15898468, 17320, 1797, 15547949, 1879637864, 8274, 2400, 5168317, 21250160, 273138, 94662, 321566102, 13685, 790133, 7252134456, 8154320, 17820, 1366330766, 676, 246966, 20297648, 5225057, 103990080, 1105635, 103359403, 108162065, 6498, 311694, 131459408, 1409788800, 117061444, 37920196, 1444763880, 59444, 4146, 6249600, 9478640, 60044752, 645625404, 1621920, 17690, 365512, 41543073, 58759, 25718497, 556, 38172933, 36789690, 78959322, 1432, 135999705, 8242976, 26307830922, 1083, 11777482, 13040, 3843, 124818575, 333432288, 10180, 1791368, 2963, 303881, 112534350, 327731040, 344484, 148035889, 165467563, 222169, 451952, 5280132984, 1665, 91616, 53910, 1169035, 110043089, 331500, 3144, 479159, 200299662, 257143040448, 2166, 289, 139650, 3357, 198440, 8364, 419862, 36686601000, 1751, 13111, 10859940, 15881, 21211, 4542060, 21933258, 470, 296359, 1163647626, 22673304, 2805396096, 18146520, 3107702724, 982, 476, 23117061, 921585, 1902730, 79546, 1687628, 376580, 10977511, 20712, 2800704, 15704889, 895536, 65724939, 948, 28473271, 1014918744, 162166399920, 50852, 1626457, 1759, 991101696, 138642, 9036, 33025904352, 70225, 3825, 2851, 203305584, 239360, 1143378721, 280842, 6422, 7397, 413447, 11285120, 382541280, 8869392, 351018, 534600, 26508882, 9784837, 2958, 789693, 10070069, 2001586498, 14043700944, 1578, 155450400, 66010180, 21605, 3087024, 16535367, 799003105, 4304408, 285043637736, 909, 2214, 2097920, 4897932, 52158, 23304, 4243659, 471859, 443456, 54974592, 278598, 38021570720, 5086640, 606, 49541, 1790, 503, 6887, 918599, 15912846, 8867, 8506485, 45665, 2012551695, 998, 1734480, 8928848124, 656880, 239, 1665, 5542542, 31211, 26321360, 22924, 74576, 12382719, 708680, 722465, 1498968, 1834803, 1449, 180612, 29768, 324367, 1662015663, 122683056, 16352, 6810091257, 13160, 9072, 142690, 1350, 105818400, 508269, 1612491937, 1868983236, 87745140, 2937158, 2654, 31847, 3557400, 275223, 93181, 328798, 13952103, 47989, 11418200500, 58, 12543, 440190, 71028585, 1593352, 39425, 946, 26503137, 2572786, 564128512, 740946416, 152224, 145124352, 368188110675, 1462, 15930, 163048, 12547, 106568000, 2570994, 945, 271349811, 40876, 7838019, 44949960, 1097, 1143, 5679, 5197478, 26523, 264220, 1041, 28887040, 17084, 102297857, 971, 20407, 1724327218, 128448, 1285, 2034580]

for i in range(len(true_soluton)):
    x=my_solution[i]
    x_true=true_soluton[i]
    if x!=x_true:
        print("i=",i,f"{x=} {x_true=}")
        break
# %%
